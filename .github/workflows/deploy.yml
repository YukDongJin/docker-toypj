name: CI/CD to Amazon ECS via ECR

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dockertoypj
          IMAGE_TAG: latest
        run: |
          echo "üõ†Ô∏è Building Docker image with latest code.."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./nodejs_ecr
          echo "üöÄ Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register new ECS task definition
        id: register-task-def
        run: |
          echo "üì¶ Registering new ECS Task Definition..."
          TASK_DEF=$(aws ecs describe-task-definition --task-definition dockertoypj-nodejs-task-service-zmqxk74h)
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)')
          echo "$NEW_TASK_DEF" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Force new ECS deployment
        run: |
          echo "‚ôªÔ∏è Triggering ECS service redeployment..."
          aws ecs update-service \
            --cluster dockertoypj-cs \
            --service dockertoypj-nodejs-task-service-zmqxk74h \
            --force-new-deployment \
            --region ap-northeast-2
          echo "ECS service updated successfully!"
